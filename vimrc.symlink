" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" ================================
" This is stuff I need for vim-latex
" =================================
filetype plugin on
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
" set grepprg=grep\ -nH\ $*
" filetype indent on
" let g:tex_flavor='latex'

" This part is so that vim-latex uses pdf by default
" let g:Tex_DefaultTargetFormat = 'pdf'
" let g:Tex_MultipleCompileFormats = 'pdf, aux'
" =================================
" End vim-latex stuff
" =================================

" =================================
" Vundle Configuration
" =================================
" See https://github.com/gmarik/vundle
" set nocompatible             " Done below
" filetype off                   " required! (no longer?)

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

" My Plugins here:

" original repos on github
" Plugin 'scrooloose/syntastic.git'
    " ^Syntax weirdness. Works well with Omnisharp
Plugin 'tpope/vim-dispatch.git'
    " ^Dispatch, allows async vim stuff. Dependency for Omnisharp
    " Plugin 'Shougo/neocomplete.git'
Plugin 'Shougo/neocomplcache.git'
    " ^Autocompletion - really awesome, but requires lua
    " ^Dependency for Omnisharp (neocomplete is an alternative, but
    " neocomplete seems to make vim segfault)
Plugin 'rking/ag.vim'
    " ^Silver searcher plugin for vim (requires ag)
Plugin 'nosami/Omnisharp.git'
    " ^C# IDE-like environment. Has dependencies
" Plugin 'altercation/vim-colors-solarized.git'
" Plugin 'vim-scripts/sudo.vim'
    " ^Allows sudo usage
" Plugin 'vim-scripts/haskell.vim'
    " ^Syntax highlighting
" Plugin 'Shougo/vimproc'
    " ^Required by ghcmod-vim
" Plugin 'ujihisa/neco-ghc'
    " ^Completion with NeoComplCache for haskell - requires ghc-mod
Plugin 'majutsushi/tagbar'
    " ^Tags, using lushtags for haskell - requires lushtags
Plugin 'Lokaltog/vim-easymotion'
    " ^Use \\w and \\b to move about super fast " Plugin 'tpope/vim-fugitive'
    " ^Use git within vim
Plugin 'tpope/vim-surround'
    " ^Use to change surrounding brackets/etc.
" Plugin 'tristen/vim-sparkup'
    " ^Use for quickly making html files
" Plugin 'eagletmt/ghcmod-vim'
    " ^Used for happy haskell programming in vim
Plugin 'plasticboy/vim-markdown'
    " ^Better markdown highlighting
Plugin 'fholgado/minibufexpl.vim'
    " ^BufferExplorer
Plugin 'kien/ctrlp.vim'
    " ^Control-P finder helper
Plugin 'bronson/vim-trailing-whitespace'
    " ^Highlight trailing whitespace
Plugin 'scrooloose/nerdtree'
    " ^NERD Tree
Plugin 'ludovicchabant/vim-lawrencium'
    " ^Lawrencium Hg-plugin
Plugin 'bling/vim-airline'
    " ^Airline statusbar
Plugin 'chriskempson/base16-vim'
    " ^Base16 color scheme
" Plugin 'edkolev/tmuxline.vim'
" Plugin 'altercation/vim-colors-solarized'

" vim-scripts repos
" Plugin 'VimRepress'
" Plugin 'python.vim'
" Plugin 'taglist.vim'
    " ^See taglists

" non github repos
" Plugin 'git://vim-latex.git.sourceforge.net/gitroot/vim-latex/vim-latex'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused
" plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" =============================
" End Vundle config
" ==============================



" =============================
" An example for a vimrc file.
" ==============================
set nobackup
set history=50		" keep 50 lines of command line history

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

if has("gui_running")
  function! ToggleGUICruft()
    if &guioptions=='i'
      exec('set guioptions=mTr')
    else
      exec('set guioptions=i')
    endif
  endfunction
  map <F11> <Esc>:call ToggleGUICruft()<cr>
  set guioptions=i
  set gfn=Inconsolata\ for\ Powerline\ Medium 12
endif



" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")
" ===============================
" End sample .vimrc file
" ==============================


" =============================
" My very own commands
" ============================

set directory^=$HOME/.vim_swap/   "put all swap files together in one place

" Lots of these are from
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/

" Set the text width to 72, for wrapping commments and stuff
set textwidth=80
" But make sure that autowrap is off:
set formatoptions-=t
" To wrap text, use gq

" There are security expoits with modelines, so set this since I don't
" use them
set modelines=0

" This sets tabs so that tabs expand to four spaces, instead of tabs.
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
" But for html - 2 spaces
autocmd FileType html :setlocal sw=2 ts=2 sts=2

" Set the encoding to UTF-8
set encoding=utf-8

" Make it so that at least 3 lines are above/below the cursor, whenever
" possible, with scrolling
set scrolloff=3

" Shows the current mode at the bottom
set showmode

" Shows partial commands
set showcmd

" Allows for command-line completion with tab
set wildmenu
set wildmode=list:longest

" Use a visual bell, instead of an audible one (woot)
set visualbell

" Highlights the line the cursor is on
set cursorline

" Show the cursor position all the time
set ruler

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Make sure there is always a status line, regardless of the number of open
" windows
set laststatus=2

" Fix wierd things related to searching:
"     First lines fix so normal regexing is used (not vim's)
"     3-4 make case searching sensible
"     5 makes so :%s/foo/bar/ acts like :%s/foo/bar/g
"     6-8 make incremental highlighted searching
"     9 makes '\ ' clear highlighting
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

" This makes it so Vim shows endlines and tabs
" set list

" This disables the arrow keys so that I do things the 'Vim way'
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" bundle setting the compiler and making into one command
command! Msb :compiler msb | Make

" This makes j and k go up and down according to screen lines, not file lines
" nnoremap j gj
" nnoremap k gk

" This makes it so that when focus is lost, everything gets saved
" au FocusLost * :wa

" This one makes typing 'jj' in insert mode escape back to command mode
inoremap jj <ESC>

" Set folds based on indent
set foldmethod=indent
" And start with nothing folded
set foldlevel=99

" This makes it so that I can see partial lines at the bottom.
set display=lastline

" This sets the color scheme at startup
" colorscheme inkpot
syntax enable
" colorscheme solarized
" colorscheme slate
" let base16colorspace=256
set t_Co=256
set background=dark
colorscheme base16-default
let g:airline_powerline_fonts = 1

" Display line numbers relative to the current line
set relativenumber
" But also show the absolute line number n the current line
set number

" Highlight the 80th column
set colorcolumn=80,90

" ===== NeoComplCache/NeoComplete Stuff =====
" Enable
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
"let g:neocomplete#enable_at_startup = 1
"let g:neocomplete#enable_smart_case = 1
" Enable omnicompletion
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif

"===== TagBar stuff =======
" toggle with \tb
let g:tagbar_left = 1
nmap <leader>tb :TagbarToggle<CR>

"===== NerdTree stuff =====
" Toggle with \nt
map <leader>nt :NERDTreeToggle<CR>
" Automatically start with it on
" autocmd vimenter * NERDTree
" Put it on the right
let g:NERDTreeWinPos="right"

"===== Ctrl-P stuff =======
" Enable caching
let g:ctrlp_use_caching = 1
" Don't clear the cache on exit
let g:ctrlp_clear_cache_on_exit = 0
" Set cache directory
let g:ctrlp_cache_dir = $HOME.'/.vim_cache/ctrlp'

"====== Taglist stuff =====
" Toggle with \tl
" map <leader>tl :TlistToggle<CR>

""====== Omnisharp stuff ======
""Don't start the server automatically
let g:Omnisharp_start_server = 0
"
""This is the default value, setting it isn't actually necessary
"let g:OmniSharp_host = "http://localhost:2000"
""
""Set the type lookup function to use the preview window instead of the status line
let g:OmniSharp_typeLookupInPreview = 1
"
""Timeout in seconds to wait for a response from the server
let g:OmniSharp_timeout = 3
"
""Showmatch significantly slows down omnicomplete
""when the first match contains parentheses.
set noshowmatch
""Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
"
""Super tab settings
""let g:SuperTabDefaultCompletionType = 'context'
""let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
""let g:SuperTabDefaultCompletionTypeDiscovery = ["&omnifunc:<c-x><c-o>","&completefunc:<c-x><c-n>"]
""let g:SuperTabClosePreviewOnPopupClose = 1
"
""don't autoselect first item in omnicomplete, show if only one item (for preview)
""remove preview if you don't want to see any documentation whatsoever.
set completeopt=longest,menuone,preview
"" Fetch full documentation during omnicomplete requests.
"" There is a performance penalty with this (especially on Mono)
"" By default, only Type/Method signatures are fetched. Full documentation can still be fetched when
"" you need it with the :OmniSharpDocumentation command.
" let g:omnicomplete_fetch_documentation=1
"
""Move the preview window (code documentation) to the bottom of the screen, so it doesn't move the code!
""You might also want to look at the echodoc plugin
"set splitbelow
"
"" Synchronous build (blocks Vim)
""autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
"" Builds can also run asynchronously with vim-dispatch installed
"autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuildAsync<cr>
"
""The following commands are contextual, based on the current cursor position.
"
autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
nnoremap <leader>fi :OmniSharpFindImplementations<cr>
nnoremap <leader>ft :OmniSharpFindType<cr>
nnoremap <leader>fs :OmniSharpFindSymbol<cr>
nnoremap <leader>fu :OmniSharpFindUsages<cr>
nnoremap <leader>fm :OmniSharpFindMembersInBuffer<cr>
"" cursor can be anywhere on the line containing an issue for this one
"nnoremap <leader>x  :OmniSharpFixIssue<cr>
"nnoremap <leader>fx :OmniSharpFixUsings<cr>
"nnoremap <leader>tt :OmniSharpTypeLookup<cr>
"nnoremap <leader>dc :OmniSharpDocumentation<cr>
"
"" Get Code Issues and syntax errors
"let g:syntastic_cs_checkers = ['syntax', 'issues']
"autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck
"autocmd TextChanged *.cs SyntasticCheck
"
""show type information automatically when the cursor stops moving
"autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()
"" this setting controls how long to pause (in ms) before fetching type / symbol information.
"set updatetime=500
"" Remove 'Press Enter to continue' message when type information is longer than one line.
"set cmdheight=2
"
"" Contextual code actions (requires CtrlP)
"nnoremap <leader><space> :OmniSharpGetCodeActions<cr>
"" Run code actions with text selected in visual mode to extract method
"vnoremap <leader><space> :call OmniSharp#GetCodeActions('visual')<cr>
"
"" rename with dialog
"nnoremap <leader>nm :OmniSharpRename<cr>
"nnoremap <F2> :OmniSharpRename<cr>
"" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
"command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")
"
"" Force OmniSharp to reload the solution. Useful when switching branches etc.
"nnoremap <leader>rl :OmniSharpReloadSolution<cr>
"nnoremap <leader>cf :OmniSharpCodeFormat<cr>
"" Load the current .cs file to the nearest project
"nnoremap <leader>tp :OmniSharpAddToProject<cr>
"" Automatically add new cs files to the nearest project on save
"autocmd BufWritePost *.cs call OmniSharp#AddToProject()
"" (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution
"nnoremap <leader>ss :OmniSharpStartServer<cr>
"nnoremap <leader>sp :OmniSharpStopServer<cr>
"
"" Add syntax highlighting for types and interfaces
"nnoremap <leader>th :OmniSharpHighlightTypes<cr>
""Don't ask to save when changing buffers (i.e. when jumping to a type definition)
"set hidden
"
"===== MiniBufExpl options ====
" New window above
let g:miniBufExplBRSplit = 0

"===== Custom Functions ====
" From http://stackoverflow.com/a/7321131
function! DeleteInactiveBufs()
    "From tabpagebuflist() help, get a list of all buffers in all tabs
    let tablist = []
    for i in range(tabpagenr('$'))
        call extend(tablist, tabpagebuflist(i + 1))
    endfor

    "Below originally inspired by Hara Krishna Dara and Keith Roberts
    "http://tech.groups.yahoo.com/group/vim/message/56425
    let nWipeouts = 0
    for i in range(1, bufnr('$'))
        if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
        "bufno exists AND isn't modified AND isn't in the list of buffers open in windows and tabs
            silent exec 'bwipeout' i
            let nWipeouts = nWipeouts + 1
        endif
    endfor
    echomsg nWipeouts . ' buffer(s) wiped out'
endfunction
command! Bdi :call DeleteInactiveBufs()

" ===========================
" End my commands
" ===========================
