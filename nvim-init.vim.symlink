" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" =================================
" vim-plug configuration
" =================================
call plug#begin('~/.local/share/nvim/plugged')
" original repos on github
" Plug 'tpope/vim-dispatch.git'
    " ^Dispatch, allows async vim stuff. Not sure if works with neovim
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
    " ^Autocompletion engine, must be installed externally
Plug 'vim-scripts/haskell.vim'
    " ^Syntax highlighting
Plug 'Lokaltog/vim-easymotion'
    " ^Use \\w and \\b to move about super fast " Plugin 'tpope/vim-fugitive'
    " ^Use git within vim
Plug 'tpope/vim-surround'
    " ^Use to change surrounding brackets/etc.
Plug 'plasticboy/vim-markdown'
    " ^Better markdown highlighting
Plug 'fholgado/minibufexpl.vim'
    " ^BufferExplorer
Plug 'kien/ctrlp.vim'
    " ^Control-P finder helper
Plug 'bronson/vim-trailing-whitespace'
    " ^Highlight trailing whitespace
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
    " ^Airline statusbar
Plug 'chriskempson/base16-vim'
    " ^Base16 color scheme
"Plug 'ensime/ensime-vim'
    " ^Scala ide-like stuff - this has some external depenedencies
Plug 'derekwyatt/vim-scala'
    " ^Scala things
Plug 'sbdchd/neoformat'
    " ^Autoformatting tool
Plug 'udalov/kotlin-vim'
    " ^Kotlin formatting/etc
Plug 'leafgarland/typescript-vim'
    " ^TS formatting/etc
Plug 'pangloss/vim-javascript'
    " ^Recommended javascript syntax highlighting
Plug 'mxw/vim-jsx'
    " ^JSX syntax highlighting, requires above for js highlighting

" All of your Plugins must be added before the following line
call plug#end()            " required
" =============================
" End vim-plug config
" ==============================

set nobackup
set history=50		" keep 50 lines of command line history

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")

set directory^=$HOME/.vim_swap/   "put all swap files together in one place

" Lots of these are from
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/

" Set the text width, for wrapping commments and stuff
set textwidth=80
" But make sure that autowrap is off:
set formatoptions-=t
" To wrap text, use gq

" There are security expoits with modelines, so set this since I don't use them
set modelines=0

" This sets tabs so that tabs expand to four spaces, instead of tabs.
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
" But for html - 2 spaces
autocmd FileType html,jade,css,scss :setlocal sw=2 ts=2 sts=2
" But for bash - 2 spaces
autocmd FileType bash,sh,zsh :setlocal sw=2 ts=2 sts=2
" For typescript - 2 spaces
autocmd FileType typescript :setlocal sw=2 ts=2 sts=2
" But for javasctript and jsx - 2 spaces
autocmd FileType js,jsx,javascript.jsx,javascript :setlocal sw=2 ts=2 sts=2

" Set the encoding to UTF-8
set encoding=utf-8

" Make it so that at least 3 lines are above/below the cursor, whenever
" possible, with scrolling
set scrolloff=3

" Shows the current mode at the bottom
set showmode

" Shows partial commands
set showcmd

" Allows for command-line completion with tab
set wildmenu
set wildmode=list:longest

" Use a visual bell, instead of an audible one
set visualbell

" Highlights the line the cursor is on
set cursorline

" Show the cursor position all the time
set ruler

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Make sure there is always a status line, regardless of the number of open
" windows
set laststatus=2

" Fix wierd things related to searching:
"     First lines fix so normal regexing is used (not vim's)
"     3-4 make case searching sensible
"     5 makes so :%s/foo/bar/ acts like :%s/foo/bar/g
"     6-8 make incremental highlighted searching
"     9 makes '\ ' clear highlighting
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

" This makes it so Vim shows endlines and tabs
set list
set listchars=tab:→\ ,space:·,trail:~ ",precedes:«,extends:»,eol:¬

" This one makes typing 'jj' in insert mode escape back to command mode
inoremap jj <ESC>

" Set the timeout to be a bit longer (1 second)
set timeoutlen=1000

" Set folds based on indent
set foldmethod=indent
" And start with nothing folded
set foldlevel=99

" This makes it so that I can see partial lines at the bottom.
set display=lastline

" This sets the color scheme at startup
syntax enable
" let base16colorspace=256
" set t_Co=256
set background=dark
colorscheme base16-default-dark
set termguicolors " Enable GUI colors for the terminal to get truecolor
" the following is from https://github.com/chriskempson/base16-shell
" if filereadable(expand("~/.vimrc_background"))
"   let base16colorspace=256
"   source ~/.vimrc_background
" endif

" Display line numbers relative to the current line
set relativenumber
" But also show the absolute line number n the current line
set number

" Highlight the 80th, 100th columns
set colorcolumn=80,100

" Better window split navigation
nnoremap <C-J> <C-W>w
nnoremap <C-K> <C-W>W
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"===== Airline stuff ======
" Use powerline fonts
let g:airline_powerline_fonts = 1
" Don't load tagbar extension
let g:airline#extensions#tagbar#enabled = 0

"===== Ctrl-P stuff =======
" Enable caching
let g:ctrlp_use_caching = 1
" Don't clear the cache on exit
let g:ctrlp_clear_cache_on_exit = 0
" Set cache directory
let g:ctrlp_cache_dir = $HOME.'/.vim_cache/ctrlp'
" Set custom ignore
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
" Ignore files not tracked by git - from https://github.com/kien/ctrlp.vim/issues/174#issuecomment-49747252
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

"===== MiniBufExpl options ====
" New window above
let g:miniBufExplBRSplit = 0
" only 1 lines
let g:miniBufExplMaxSize = 1
" always use MRU (most recently used) sorting by default
" toggle with :MBEToggleMRU
let g:miniBufExplSortBy = 'mru'

" ===== YouCompleteMe Stuff ====
" Show detailed completion context
let g:ycm_add_preview_to_completeopt = 1
" Don't show diagnostics
let g:ycm_show_diagnostics_ui = 0

" ==== Scala stuff ====
" Set line length to 100 for scala files
au FileType scala setlocal textwidth=100
" Easy Type Inspection (\t)
au FileType scala nnoremap <localleader>t :EnType<CR>
" Jump to definition with \df
au FileType scala nnoremap <localleader>df :EnDeclaration<CR>

" ==== NeoFormat ====
" Format scala files on save automatically
au BufWritePre *.scala :Neoformat
" Custom nailgun scalafmt
let g:neoformat_scala_ngscalafmt = {
            \ 'exe': 'ng',
            \ 'args': ['scalafmt', '--stdin', '--config', '~/.scalafmt.conf'],
            \ 'stdin': 1
            \ }
" Only use scalafmt for scala
let g:neoformat_enabled_scala = ['ngscalafmt']
" Turn on verbose info for debugging
" let g:neoformat_verbose = 1
"
" ==== Kotlin stuff ====
" Set line length to 120 for kotlin files
au FileType kotlin setlocal textwidth=120

" ==== Typescript stuff ====
" Turn off indentation magic from typescript-vim plugin
let g:typescript_indent_disable = 1
au FileType typescript setlocal textwidth=100

"===== Custom Functions ====
" From http://stackoverflow.com/a/7321131
function! DeleteInactiveBufs()
    "From tabpagebuflist() help, get a list of all buffers in all tabs
    let tablist = []
    for i in range(tabpagenr('$'))
        call extend(tablist, tabpagebuflist(i + 1))
    endfor

    "Below originally inspired by Hara Krishna Dara and Keith Roberts
    "http://tech.groups.yahoo.com/group/vim/message/56425
    let nWipeouts = 0
    for i in range(1, bufnr('$'))
        if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
        "bufno exists AND isn't modified AND isn't in the list of buffers open in windows and tabs
            silent exec 'bwipeout' i
            let nWipeouts = nWipeouts + 1
        endif
    endfor
    echomsg nWipeouts . ' buffer(s) wiped out'
endfunction
command! Bdi :call DeleteInactiveBufs()
